#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int TipoChave;

typedef struct TipoCelula *Apontador;

typedef struct
{
    char matricula[50];
    char nomeAluno[80];
} TipoAluno;

typedef struct
{
    char nomeDoCurso[50];
    int cargaHoraria;
    int idCurso;
    char descricaoCurso[500];
} TipoCurso;

typedef struct
{
    int identificador;
    TipoAluno listaDeAlunos[30]; // ERRADO n podemos usar estatica
    TipoProfessor professorResponsavel;
} TipoTurma;

typedef struct
{
    char nomeProfessor[80];
    char disciplina[50];

} TipoProfessor;

typedef union
{
    TipoAluno aluno;
    TipoCurso curso;
    TipoTurma turma;
    TipoProfessor professor;
} TipoItem;

struct TipoCelula
{
    TipoItem Item;

    Apontador Prox;
};

typedef struct
{
    Apontador Primeiro, Ultimo;
    int TagTipo;
    int tamanho;
} TipoLista;

TipoLista AlunosInstancia, CursosInstancia, TurmasInstancia, ProfessoresInstancia;

void Inicia(TipoLista *Lista)
{
    Lista->Primeiro = (Apontador)malloc(sizeof(struct TipoCelula));
    Lista->Ultimo = Lista->Primeiro;
    Lista->Primeiro->Prox = NULL;
    Lista->tamanho = 0;
}

int Vazia(TipoLista *Lista)
{
    return (Lista->Primeiro == Lista->Ultimo);
}

void Insere(TipoItem x, TipoLista *Lista)
{
    Lista->Ultimo->Prox = (Apontador)malloc(sizeof(struct TipoCelula));
    Lista->Ultimo = Lista->Ultimo->Prox;
    Lista->Ultimo->Item = x;
    Lista->Ultimo->Prox = NULL;
    Lista->tamanho++;
}

void ImprimeLista(TipoLista Lista)
{
    Apontador Aux;
    Aux = Lista.Primeiro->Prox;
    while (Aux != NULL)
    {

        TipoItem itemNow = Aux->Item;

        switch (Lista.TagTipo)
        {
        case 1:
            Imprime1Aluno(itemNow.aluno);
            break;
        case 2:
            Imprime1Curso(itemNow.curso);
            break;
        case 3:
            Imprime1Turma(itemNow.turma);
            break;
        case 4:
            Imprime1Professor(itemNow.professor);
            break;
        default:
            break;
        }

        Aux = Aux->Prox;
    }
}

void Imprime1Aluno(TipoAluno aluno){};
void Imprime1Curso(TipoCurso curso){};
void Imprime1Turma(TipoTurma turma){};
void Imprime1Professor(TipoProfessor professor){};

void DestroiLista(TipoLista *Lista)
{
    Apontador Aux = Lista->Primeiro;
    while (Aux != NULL)
    {
        Apontador temp = Aux;
        Aux = Aux->Prox;
        free(temp);
    }
    Lista->Primeiro = Lista->Ultimo = NULL;
    Lista->tamanho = 0;
}

int main()
{

    Inicia(&AlunosInstancia);
    Inicia(&CursosInstancia);
    Inicia(&TurmasInstancia);
    Inicia(&ProfessoresInstancia);

    AlunosInstancia.TagTipo = 1;
    CursosInstancia.TagTipo = 2;
    TurmasInstancia.TagTipo = 3;
    ProfessoresInstancia.TagTipo = 4;

    Menu();

    return 0;
}

void cadastraAluno(){

    TipoAluno newAluno;

    printf("Digite o nome do aluno: ");

    // n sei como faz scanf de string
    printf("");

};


void cadastraCurso(){};
void cadastraTurma(){};
void cadastraProfessor(){};

void matriculaEmCurso(){};

void designacaoProfessores(){};

// void listaAlunos(){};
// void listaCursos(){};
// void listaTurmas(){};
// void listaProfessores(){};


void Menu()
{
    int continua = 1;
    int opcao = 0;
    while (continua)
    {
        printf("1 - Cadastrar Aluno\n");
        printf("2 - Cadastrar Curso\n");
        printf("3 - Matrícula em Cursos\n");
        printf("4 - Cadastrar Turma\n");
        printf("5 - Designação de Professores\n");
        printf("6 - Lista Alunos\n");
        printf("7 - Lista Cursos\n");
        printf("8 - Lista Turmas\n");
        printf("9 - Lista Professores\n");
        printf("Digite o numero da opcao desejada: ");

        scanf("%d", &opcao);

        switch (opcao)
        {
        case 1:
            cadastraAluno();
            break;
        case 2:
            cadastraCurso();
            break;
        case 3:
            matriculaEmCurso();
            break;
        case 4:
            cadastraTurma();
            break;
        case 5:
            designacaoProfessores();
            break;
        case 6:
            ImprimeLista(AlunosInstancia);
            break;
        case 7:
            ImprimeLista(CursosInstancia);
            break;
        case 8:
            ImprimeLista(TurmasInstancia);
            break;
        case 9:
            ImprimeLista(ProfessoresInstancia);
            break;
        default:
            printf("Digite uma opcao valida!!!\n");
            break;
        }
    }
}

int Confirma()
{
    int op;
    printf("Voce confirma? (0 cancela)");
    scanf("%d", &op);
    return op;
}