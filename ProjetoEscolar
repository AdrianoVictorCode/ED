#include <stdio.h>
#include <stdlib.h>

typedef int TipoChave;

typedef struct TipoCelula *Apontador;

typedef struct
{
    char matricula[50];
    char nomeAluno[80];
} AlunoS;

typedef struct
{
    char nomeDoCurso[50];
    int cargaHoraria;
    int idCurso;
    char descricaoCurso[500];
} CursoS;

typedef struct
{
    int identificador;
    AlunoS listaDeAlunos[30]; // ERRADO n podemos usar estatica
    ProfessorS professorResponsavel;
} TurmaS;

typedef struct
{
    char nomeProfessor[80];
    char disciplina[50];

} ProfessorS;

typedef union
{
    AlunoS aluno;
    CursoS materia;
    TurmaS turma;
    ProfessorS professor;
} TipoItem;

struct TipoCelula
{
    TipoItem Item;

    Apontador Prox;
};

typedef struct
{
    Apontador Primeiro, Ultimo;
    int TagTipo;
    int tamanho;
} TipoLista;

void Inicia(TipoLista *Lista)
{
    Lista->Primeiro = (Apontador)malloc(sizeof(struct TipoCelula));
    Lista->Ultimo = Lista->Primeiro;
    Lista->Primeiro->Prox = NULL;
    Lista->tamanho = 0;
}

int Vazia(TipoLista *Lista)
{
    return (Lista->Primeiro == Lista->Ultimo);
}

void Insere(TipoItem x, TipoLista *Lista)
{
    Lista->Ultimo->Prox = (Apontador)malloc(sizeof(struct TipoCelula));
    Lista->Ultimo = Lista->Ultimo->Prox;
    Lista->Ultimo->Item = x;
    Lista->Ultimo->Prox = NULL;
    Lista->tamanho++;
}

void Imprime(TipoLista Lista)
{
    Apontador Aux;
    Aux = Lista.Primeiro->Prox;
    while (Aux != NULL)
    {

        switch (Lista.TagTipo)
        {
        case 1:
            ImprimeAluno();
            break;

        case 2:
            ImprimeCurso();
            break;
        case 3:
            ImprimeTurma();
            break;
        case 4:
            ImprimeProfessor;
            break;
        default:
            break;
        }

        Aux = Aux->Prox;
    }
}

void DestroiLista(TipoLista *Lista)
{
    Apontador Aux = Lista->Primeiro;
    while (Aux != NULL)
    {
        Apontador temp = Aux;
        Aux = Aux->Prox;
        free(temp);
    }
    Lista->Primeiro = Lista->Ultimo = NULL;
    Lista->tamanho = 0;
}

int main()
{
    TipoLista Alunos, Cursos, Turmas, Professores;

    Inicia(&Alunos);
    Inicia(&Cursos);
    Inicia(&Turmas);
    Inicia(&Professores);

    Menu();

    return 0;
}

void cadastraAluno();
void cadastraCurso();

void matriculaEmCurso();
void cadastraTurma();

void designacaoProfessores();

void listaAlunos();
void listaCursos();
void listagemC();

void ImprimeAluno();
void ImprimeCurso();
void ImprimeTurma();
void ImprimeProfessor();

void Menu()
{
    int continua = 1;
    int opcao = 0;
    while (continua)
    {
        printf("1 - Cadastrar Aluno\n");
        printf("2 - Cadastrar Curso\n");
        printf("3 - Matrícula em Cursos\n");
        printf("4 - Cadastrar Turma\n");
        printf("5 - Designação de Professores\n");
        printf("6 - Lista Alunos\n");
        printf("7 - Lista Cursos\n");
        printf("8 - Lista Turmas\n");
        printf("9 - Lista Professores\n");
        printf("Digite o numero da opcao desejada: ");

        scanf("%d", &opcao);

        switch (opcao)
        {
        case 1:
            cadastraAluno();
            break;
        case 2:
            cadastraCurso();
            break;
        case 3:
            matriculaEmCurso();
            break;
        case 4:
            cadastraTurma();
            break;
        case 5:
            designacaoProfessores();
            break;
        case 6:
            listaAlunos();
            break;
        case 7:
            listaCursos();
            break;
        case 8:
            listaTurmas();
            break;
        case 9:
            listaProfessores();
            break;
        default:
            printf("Digite uma opcao valida!!!\n");
            break;
        }
    }
}

int Confirma()
{
    int op;
    printf("Voce confirma? (0 cancela)");
    scanf("%d", &op);
    return op;
}